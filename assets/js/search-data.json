{
  
    
        "post0": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name John Doe &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 18 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; length 3 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}] . def getInfo(db): cars = [] i = 1 fn = input(&quot;Enter First Name: &quot;) ln = input(&quot;Enter Last Name: &quot;) dob = input(&quot;Enter DOB: &quot;) res = input(&quot;Enter Residence: &quot;) em = input(&quot;Enter Your Email:&quot;) while i &gt; 0: c = input(&quot;Enter owned cars, type exit to quit: &quot;) if c.lower() == &quot;exit&quot;: if len(cars) == 0: cars.append(&quot;none&quot;) i = 0 else: cars.append(c) db.append({&quot;FirstName&quot;: fn, &quot;LastName&quot;: ln, &quot;DOB&quot;: dob, &quot;Residence&quot;: res, &quot;Email&quot;: em, &quot;Owns_Cars&quot;: cars }) . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) getInfo(InfoDb) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner john doe Residence: here Birth Day: 1/3/33 Cars: car1, car2 . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://syeung2.github.io/xc22/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "My Bash File",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/syeung2/vscode exists. Directory /home/syeung2/vscode/APCSP does not exists... cloning https://github.com/nighthawkcoders/APCSP.git Cloning into &#39;APCSP&#39;... remote: Enumerating objects: 9173, done. remote: Counting objects: 100% (748/748), done. remote: Compressing objects: 100% (313/313), done. remote: Total 9173 (delta 454), reused 702 (delta 414), pack-reused 8425 Receiving objects: 100% (9173/9173), 16.49 MiB | 12.58 MiB/s, done. Resolving deltas: 100% (4949/4949), done. Directory /home/syeung2/vscode/APCSP exists. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . Navigate to project, then navigate to area wwhere files were cloned /home/syeung2/vscode/APCSP list top level or root of files with project pulled from github Gemfile _action_files _layouts _posts docker-compose.yml LICENSE _config.yml _notebooks _sass images Makefile _fastpages_docs _pages _word index.html README.md _includes _plugins assets python list again with hidden files pulled from github . .gitignore _action_files _pages docker-compose.yml .. .vscode _config.yml _plugins images .devcontainer.json Gemfile _fastpages_docs _posts index.html .git LICENSE _includes _sass python .gitattributes Makefile _layouts _word .github README.md _notebooks assets list all files in long format total 120 drwxr-xr-x 18 syeung2 syeung2 4096 Aug 25 22:34 . drwxr-xr-x 4 syeung2 syeung2 4096 Aug 25 22:34 .. -rw-r--r-- 1 syeung2 syeung2 420 Aug 25 22:34 .devcontainer.json drwxr-xr-x 8 syeung2 syeung2 4096 Aug 25 22:34 .git -rw-r--r-- 1 syeung2 syeung2 84 Aug 25 22:34 .gitattributes drwxr-xr-x 4 syeung2 syeung2 4096 Aug 25 22:34 .github -rw-r--r-- 1 syeung2 syeung2 917 Aug 25 22:34 .gitignore drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 .vscode -rwxr-xr-x 1 syeung2 syeung2 1304 Aug 25 22:34 Gemfile -rw-r--r-- 1 syeung2 syeung2 11351 Aug 25 22:34 LICENSE -rwxr-xr-x 1 syeung2 syeung2 1422 Aug 25 22:34 Makefile -rwxr-xr-x 1 syeung2 syeung2 3614 Aug 25 22:34 README.md drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _action_files -rw-r--r-- 1 syeung2 syeung2 3716 Aug 25 22:34 _config.yml drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _fastpages_docs drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _includes drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _layouts drwxr-xr-x 3 syeung2 syeung2 4096 Aug 25 22:34 _notebooks drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _pages drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _plugins drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _posts drwxr-xr-x 3 syeung2 syeung2 4096 Aug 25 22:34 _sass drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 _word drwxr-xr-x 4 syeung2 syeung2 4096 Aug 25 22:34 assets -rwxr-xr-x 1 syeung2 syeung2 1136 Aug 25 22:34 docker-compose.yml drwxr-xr-x 5 syeung2 syeung2 4096 Aug 25 22:34 images -rw-r--r-- 1 syeung2 syeung2 1061 Aug 25 22:34 index.html drwxr-xr-x 2 syeung2 syeung2 4096 Aug 25 22:34 python . test=“python3” # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo “$check” else # less than zero echo “$check” fi . “” . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . Look for posts /home/syeung2/vscode/APCSP/_posts total 228 -rw-r--r-- 1 syeung2 syeung2 21306 Aug 25 22:34 2022-06-01-TT160-deploy.md -rw-r--r-- 1 syeung2 syeung2 5861 Aug 25 22:34 2022-07-07-PBL-binary.md -rw-r--r-- 1 syeung2 syeung2 3085 Aug 25 22:34 2022-07-08-PBL-grade_calc.md -rw-r--r-- 1 syeung2 syeung2 3698 Aug 25 22:34 2022-07-08-PBL-graph.md -rw-r--r-- 1 syeung2 syeung2 5729 Aug 25 22:34 2022-07-08-PBL-life.md -rw-r--r-- 1 syeung2 syeung2 14387 Aug 25 22:34 2022-07-08-PBL-snake.md -rw-r--r-- 1 syeung2 syeung2 334 Aug 25 22:34 2022-07-10-PBL-database.md -rw-r--r-- 1 syeung2 syeung2 2908 Aug 25 22:34 2022-07-10-PBL-jokes.md -rw-r--r-- 1 syeung2 syeung2 4046 Aug 25 22:34 2022-07-10-PBL-rapidapi.md -rw-r--r-- 1 syeung2 syeung2 6685 Aug 25 22:34 2022-07-19-PBL-calculator.md -rw-r--r-- 1 syeung2 syeung2 23325 Aug 25 22:34 2022-07-25-CSP-workshop.md -rw-r--r-- 1 syeung2 syeung2 2333 Aug 25 22:34 2022-08-15-TP000-student_score_history.md -rw-r--r-- 1 syeung2 syeung2 4363 Aug 25 22:34 2022-08-15-TP100-pseudo_code.md -rw-r--r-- 1 syeung2 syeung2 7968 Aug 25 22:34 2022-08-15-TR100-tool_setup.md -rw-r--r-- 1 syeung2 syeung2 15409 Aug 25 22:34 2022-08-15-TT100-tools.md -rw-r--r-- 1 syeung2 syeung2 5590 Aug 25 22:34 2022-08-15-TT101-vscode-wsl.md -rw-r--r-- 1 syeung2 syeung2 2155 Aug 25 22:34 2022-08-22-TR110-intro_python.md -rw-r--r-- 1 syeung2 syeung2 5173 Aug 25 22:34 2022-08-22-TT110-fastpages.md -rw-r--r-- 1 syeung2 syeung2 2798 Aug 25 22:34 2022-08-22-TT110-focus.md -rw-r--r-- 1 syeung2 syeung2 2737 Aug 25 22:34 2022-08-29-TR120-data_abstract.md -rw-r--r-- 1 syeung2 syeung2 10683 Aug 25 22:34 2022-08-29-TT120-agile.md -rw-r--r-- 1 syeung2 syeung2 4498 Aug 25 22:34 2022-08-29-TT120-html_fragments.md -rw-r--r-- 1 syeung2 syeung2 9037 Aug 25 22:34 2022-09-05-TP130-create_performance_task.md -rw-r--r-- 1 syeung2 syeung2 7753 Aug 25 22:34 2022-09-05-TP131-create-task-bria.md -rw-r--r-- 1 syeung2 syeung2 8066 Aug 25 22:34 2022-09-05-TR130-creative_development.md -rw-r--r-- 1 syeung2 syeung2 3520 Aug 25 22:34 2022-09-05-TT130-applab.md -rw-r--r-- 1 syeung2 syeung2 720 Aug 25 22:34 README.md .",
            "url": "https://syeung2.github.io/xc22/jupyter/2022/08/25/bash_file.html",
            "relUrl": "/jupyter/2022/08/25/bash_file.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Jupyter Notebook",
            "content": "msg = &quot;Hello World&quot; print(msg) . Hello World .",
            "url": "https://syeung2.github.io/xc22/jupyter/2022/08/22/JupyterNotebook.html",
            "relUrl": "/jupyter/2022/08/22/JupyterNotebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "This is Mr Yeung’s Blog about running. . PRS . Race Time . 400m . | 0:53 . | . 800m . | 2:02 . | . 1600m . | 4:53 . | . 3200m . | 11:20 . | . 5000m . | 18:41 . | .",
          "url": "https://syeung2.github.io/xc22/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Schedule",
          "content": "",
          "url": "https://syeung2.github.io/xc22/schedule/",
          "relUrl": "/schedule/",
          "date": ""
      }
      
  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://syeung2.github.io/xc22/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}